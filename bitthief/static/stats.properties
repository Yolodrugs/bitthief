# BitThief - A Free Riding BitTorrent Client
# Copyright (C) 2006 Patrick Moor <patrick@moor.ws>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
# USA.

# statistics property file
network.rawbytes.in             = keyed, statistics
network.rawbytes.in.contribute  = network.rawbytes
network.rawbytes.out            = keyed, statistics
network.rawbytes.out.contribute = network.rawbytes
network.rawbytes                = keyed, statistics

network.connections.in             = statistics
network.connections.in.contribute  = network.connections
network.connections.out            = statistics
network.connections.out.contribute = network.connections
network.connections                = statistics

network.connections.opened                = counter
network.connections.opened.in             = counter
network.connections.opened.in.contribute  = network.connections.opened
network.connections.opened.out            = counter
network.connections.opened.out.contribute = network.connections.opened

network.connections.closed                = keyed
network.connections.closed.in             = keyed
network.connections.closed.in.contribute  = network.connections.closed
network.connections.closed.out            = keyed
network.connections.closed.out.contribute = network.connections.closed

network.connections.seed    = statistics
network.connections.leecher = statistics
network.connections.pending = statistics

network.choke      = keyed
network.interested = keyed

network.requestqueue = keyed

network.keepalive.in      = keyed
network.keepalive.out     = keyed
network.have.in           = keyed
network.have.out          = keyed
network.cancel.in         = keyed
network.cancel.out        = keyed
network.request.in        = keyed
network.request.out       = keyed
network.interested.in     = keyed
network.interested.out    = keyed
network.notinterested.in  = keyed
network.notinterested.out = keyed
network.choke.in          = keyed
network.choke.out         = keyed
network.unchoke.in        = keyed
network.unchoke.out       = keyed
network.piece.in          = keyed
network.piece.out         = keyed

torrent.validbytes                = statistics
torrent.blocks                    = keyed, statistics
torrent.blocks.seed               = keyed, statistics
torrent.blocks.seed.contribute    = torrent.blocks
torrent.blocks.leecher            = keyed, statistics
torrent.blocks.leecher.contribute = torrent.blocks
torrent.blocks.duplicates         = statistics
torrent.pieces.valid              = statistics
torrent.pieces.hashfailed         = statistics
torrent.pieces.pending            = statistics

torrent.distinctpeers = counter

torrent.request.refusing = keyed

torrent.throttler.waitingjobs = counter

tracker.peers               = counter
tracker.seeds               = counter
tracker.seeds.contribute    = tracker.peers
tracker.leechers            = counter
tracker.leechers.contribute = tracker.peers
tracker.announces           = counter

dht.packets                 = counter
dht.packets.in              = counter
dht.packets.in.contribute   = dht.packets
dht.packets.out             = counter
dht.packets.out.contribute  = dht.packets

dht.ping                 = counter
dht.ping.in              = counter
dht.ping.in.contribute   = dht.ping, dht.packets.in
dht.ping.out             = counter
dht.ping.out.contribute  = dht.ping, dht.packets.out

dht.findnode                 = counter
dht.findnode.in              = counter
dht.findnode.in.contribute   = dht.findnode, dht.packets.in
dht.findnode.out             = counter
dht.findnode.out.contribute  = dht.findnode, dht.packets.out

dht.getpeers                 = counter
dht.getpeers.in              = counter
dht.getpeers.in.contribute   = dht.getpeers, dht.packets.in
dht.getpeers.out             = counter
dht.getpeers.out.contribute  = dht.getpeers, dht.packets.out
dht.getpeers.matches         = counter

dht.announce                 = counter
dht.announce.in              = counter
dht.announce.in.contribute   = dht.announce, dht.packets.in
dht.announce.out             = counter
dht.announce.out.contribute  = dht.announce, dht.packets.out

dht.bytes                 = counter
dht.bytes.in              = counter
dht.bytes.in.contribute   = dht.bytes
dht.bytes.out             = counter
dht.bytes.out.contribute  = dht.bytes

dht.announce.invalidtoken            = counter
dht.announce.invalidtoken.contribute = dht.announce.in

dht.possiblepeers = counter

dht.routing.remove = counter
dht.routing.remove.primary = counter
dht.routing.remove.primary.contribute = dht.routing.remove
dht.routing.remove.secondary = counter
dht.routing.remove.secondary.contribute = dht.routing.remove

dht.routing.transfer = counter
dht.routing.buckets = counter

dht.routing.peers = counter
dht.routing.peers.primary = counter
dht.routing.peers.primary.contribute = dht.routing.peers
dht.routing.peers.secondary = counter
dht.routing.peers.secondary.contribute = dht.routing.peers

dht.store.hashes = counter
dht.store.peers  = counter
